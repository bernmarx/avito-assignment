// Code generated by MockGen. DO NOT EDIT.
// Source: balance_contract.go

// Package balance is a generated GoMock package.
package balance

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorageAccess is a mock of StorageAccess interface
type MockStorageAccess struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAccessMockRecorder
}

// MockStorageAccessMockRecorder is the mock recorder for MockStorageAccess
type MockStorageAccessMockRecorder struct {
	mock *MockStorageAccess
}

// NewMockStorageAccess creates a new mock instance
func NewMockStorageAccess(ctrl *gomock.Controller) *MockStorageAccess {
	mock := &MockStorageAccess{ctrl: ctrl}
	mock.recorder = &MockStorageAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageAccess) EXPECT() *MockStorageAccessMockRecorder {
	return m.recorder
}

// DepositMoney mocks base method
func (m *MockStorageAccess) DepositMoney(accountId, balanceId int, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepositMoney", accountId, balanceId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// DepositMoney indicates an expected call of DepositMoney
func (mr *MockStorageAccessMockRecorder) DepositMoney(accountId, balanceId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepositMoney", reflect.TypeOf((*MockStorageAccess)(nil).DepositMoney), accountId, balanceId, amount)
}

// WithdrawMoney mocks base method
func (m *MockStorageAccess) WithdrawMoney(accountId, balanceId int, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawMoney", accountId, balanceId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawMoney indicates an expected call of WithdrawMoney
func (mr *MockStorageAccessMockRecorder) WithdrawMoney(accountId, balanceId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawMoney", reflect.TypeOf((*MockStorageAccess)(nil).WithdrawMoney), accountId, balanceId, amount)
}

// TransferMoney mocks base method
func (m *MockStorageAccess) TransferMoney(senderAccountId, senderBalanceId, receiverAccountId, receiverBalanceId int, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferMoney", senderAccountId, senderBalanceId, receiverAccountId, receiverBalanceId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferMoney indicates an expected call of TransferMoney
func (mr *MockStorageAccessMockRecorder) TransferMoney(senderAccountId, senderBalanceId, receiverAccountId, receiverBalanceId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferMoney", reflect.TypeOf((*MockStorageAccess)(nil).TransferMoney), senderAccountId, senderBalanceId, receiverAccountId, receiverBalanceId, amount)
}

// GetBalance mocks base method
func (m *MockStorageAccess) GetBalance(accountId, balanceId int) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", accountId, balanceId)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockStorageAccessMockRecorder) GetBalance(accountId, balanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStorageAccess)(nil).GetBalance), accountId, balanceId)
}

// GetBalanceHistory mocks base method
func (m *MockStorageAccess) GetBalanceHistory(accountId, balanceId int, sort string, page int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceHistory", accountId, balanceId, sort, page)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceHistory indicates an expected call of GetBalanceHistory
func (mr *MockStorageAccessMockRecorder) GetBalanceHistory(accountId, balanceId, sort, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceHistory", reflect.TypeOf((*MockStorageAccess)(nil).GetBalanceHistory), accountId, balanceId, sort, page)
}

// MockExchangeRateGetter is a mock of ExchangeRateGetter interface
type MockExchangeRateGetter struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateGetterMockRecorder
}

// MockExchangeRateGetterMockRecorder is the mock recorder for MockExchangeRateGetter
type MockExchangeRateGetterMockRecorder struct {
	mock *MockExchangeRateGetter
}

// NewMockExchangeRateGetter creates a new mock instance
func NewMockExchangeRateGetter(ctrl *gomock.Controller) *MockExchangeRateGetter {
	mock := &MockExchangeRateGetter{ctrl: ctrl}
	mock.recorder = &MockExchangeRateGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExchangeRateGetter) EXPECT() *MockExchangeRateGetterMockRecorder {
	return m.recorder
}

// GetExchangeRate mocks base method
func (m *MockExchangeRateGetter) GetExchangeRate(cur string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", cur)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate
func (mr *MockExchangeRateGetterMockRecorder) GetExchangeRate(cur interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockExchangeRateGetter)(nil).GetExchangeRate), cur)
}
