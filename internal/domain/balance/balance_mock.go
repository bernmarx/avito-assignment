// Code generated by MockGen. DO NOT EDIT.
// Source: balance.go

// Package balance is a generated GoMock package.
package balance

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockdataAccess is a mock of dataAccess interface
type MockdataAccess struct {
	ctrl     *gomock.Controller
	recorder *MockdataAccessMockRecorder
}

// MockdataAccessMockRecorder is the mock recorder for MockdataAccess
type MockdataAccessMockRecorder struct {
	mock *MockdataAccess
}

// NewMockdataAccess creates a new mock instance
func NewMockdataAccess(ctrl *gomock.Controller) *MockdataAccess {
	mock := &MockdataAccess{ctrl: ctrl}
	mock.recorder = &MockdataAccessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdataAccess) EXPECT() *MockdataAccessMockRecorder {
	return m.recorder
}

// Deposit mocks base method
func (m *MockdataAccess) Deposit(id int, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit
func (mr *MockdataAccessMockRecorder) Deposit(id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockdataAccess)(nil).Deposit), id, amount)
}

// Withdraw mocks base method
func (m *MockdataAccess) Withdraw(id int, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", id, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw
func (mr *MockdataAccessMockRecorder) Withdraw(id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockdataAccess)(nil).Withdraw), id, amount)
}

// Transfer mocks base method
func (m *MockdataAccess) Transfer(senderID, receiverID int, amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", senderID, receiverID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer
func (mr *MockdataAccessMockRecorder) Transfer(senderID, receiverID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockdataAccess)(nil).Transfer), senderID, receiverID, amount)
}

// GetBalance mocks base method
func (m *MockdataAccess) GetBalance(id int) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", id)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockdataAccessMockRecorder) GetBalance(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockdataAccess)(nil).GetBalance), id)
}
